5.6 배열(Array) 타입
변수는 하나의 값만 저장할 수 있다. 따라서 저장해야 할 값의 수가 많아지면 그만큼 많은 변수가 필요하다.
예를 들어 학생 30명의 성적을 저장하고 평균값을 구한다고 가정해 보자. 
1. 30명의 성적을 저장하기 위해 변수 30개 선언
2. 평점을 구하기 위해 변수들을 모두 더함.
이러한 방법은 비효율적인 코딩이다.
따라서 많은 양의 값을 다루는 좀 더 효율적인 방법이 필요한데 이것이 배열이다.
배열은 연속된 공간에 값을 나열시키고, 각 값에 인덱스를 부여해 놓은 자료구조이다.
인덱스는 대괄호[ ]와 함께 사용하여 각 항목의 값을 읽거나 저장하는데 사용한다.
배열과 함께 저장하면  평균값은 배열의 인덱스를 이용해서 for 문으로 쉽게 구할 수 있다.
학생 수가 30명이 아니라 수백명이 되어도 for 문의 i<30만 변경하면 되므로 많은 양의 데이터를 적은 코드로 손쉽게 처리할 수 있다.
배열은 다음과 같은 특징을 가지고 있다.
1. 배열은 같은 타입의 값만 관리한다.
2. 배열의 길이는 늘리거나 줄일 수 없다.

배열 변수 선언
배열을 사용하기 위해서는 우선 배열 변수를 선언해야 한다. 배열 변수 선언은 두가지가 있지만 첫 번째 방법을 주로 사용한다.
타입[ ] 변수;  or 타입 변수[ ];
타입별로 배열을 선언하는 방법 
int[ ] intArray;                                    int[ ] intArray[ ];
double[ ] doubleArray;                        double[ ] doubleArray[ ]; 
String[ ] strArray;                                String[ ] strArray[ ];
참조할 배열이 d벗다면 qoduf 변수도 null로 초기화할 수 있다.
타입[ ] 변수 = null;
만약 배열 변수가 null 값을 가진 상태에서 변수[인덱스]로 값을 읽거나 저장하게 되면 NullPointerException이 발생.

값 목록으로 배열 생성
타입[ ]  변수 = { 값0, 값1, 값2, 값3, ....};
중괄호 { } 는 나열된 값들을 항목으로 가지는 배열을 힙에 생성하고, 번지를 리턴한다.
배열 변수는 리턴된 번지를 저장함으로써 참조가 이루어진다.
String[ ] season = { "Spring", "Summer", "Fall", "Winter" };
season[ 1 ]의 "Summer"을 "여름"으로 바꾸고 싶다면
season[1] = "여름";     
중괄호 { }로 감싼 값의 목록을 배열 변수에 대입할 때 주의할 점이 있다. 배열 변수를 미리 선언한
후에는 값 목록을 변수에 대입할 수 없다.
배열 변수를 선언한 시점과 값 목록이 대입되는 시점이 다르다면 다음과 같이 new 타입[ ]을 중괄호 앞에 붙여 주면 된다.
타입은 배열 변수를 선언할 때 사용한 타입과 동일하게 주면 된다.
메소드의 매개변수가 배열 타입일 경우에도 마찬가지다. 
메소드를 호출할 때 매개값으로 중괄호로 감싼 값 목록을 주면 컴파일 에러가 발생한다.

new 연산자로 배열 생성
값의 목록은 없지만 향후 값들을 저장할 목적으로 배열을 미리 생성할 수도 있다. 
타입[ ] 변수 = new 타입[길이];
이미 배열 변수가 선언된 후에도 다음과 같이 대입이 가능하다.
타입[ ] 변수 = null;
변수 = new 타입[길이];
new 연산자로 배열을 처음 생성하면 배열 항목은 기본값으로 초기화된다. 
배열을 생성하고 난 후 특정 인덱스 항목을 새로운 값으로 변경하는 방법은 동일하다.
변수[인덱스] = 값;
