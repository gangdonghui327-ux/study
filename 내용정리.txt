1.1 프로그래밍 언어와 자바
컴퓨터가 이해할 수 있는 기계어는 사람이 이해하기에는 매우 어렵다. 마찬가지로 사람이 사용하는 언어는 컴퓨터 입장에서 보면 이해할 수 없는 문자의 집합이다.
때문에 다리 역할을 하는 프로그래밍 언어가 필요하다. 프로그래밍 언어는 고급 언어와 저급 언어로 구분된다.
고급언어는 컴파일, 저급 언어는 어셈블리어가 이에 속한다.
고급 언어에는 대표적으로 자바,C,C++,C#,파이썬 등이 있다. 
그 중에서도 자바는 가장 성공한 프로그래밍언어로서 핵심 언어로 사용되고 있다.
자바는 오라클에서 라이선스를 가지고 있으며, 오라클은 자바 개발 도구를 배포하여 기술적 지원을 하고 있다.
자바와 다른 프로그래밍 언어와 비교를 해보면 다음과 같은 특징이 있다.
1. 모든 운영체제에서 실행가능
2. 객체지향 프로그래밍
3. 메모리 자동 정리
4. 풍부한 무료 라이브러리

1.2 운영체제별 JDK 설치
자라블 실행하기 위해서는 JDK를 설치해야된다. JDK에는 OPen JDK와 Oracle JDK가 있다.
응답서, JVM : Oracle JDK > Open JDK
JDK 비용 : Oracle JDK < Open JDK
우리 책에는 Oracle JDK를 사용한다. 왜냐하면 LTS라는 장기간 기술 지원을 받을 수 있는 버전을 제공받기 때문이다.
윈도우, 맥OS 둘다 지원한다.

1.3 운영체제별 환경 변수 설정
운영체제는 프로그램들이 실행하면서 사용할 수 있는 값들을 환경 변수 이름으로 관리한다. 
JAVA_HOME 환경 변수를 생성하고, Path환경 변수를 수정하는 것이 좋다.

1.4 바이트코드 파일과 자바 가상 머신
JDK를 설치했다면 이제 자바 언어로 작성한 소스 파일을 만들고 컴파일할 수 있다. 자바 소스 파일의 확장명은 .java이다.
텍스트 파일이므로 어떤 텍스트 에디터에서도 작성이 가능하다.
소스 파일을 작성한 후에는 컴파일을 해야 한다. 컴파일 결과는 확장명이 .class인 바이트코드파일로 생성된다. 
(1) 자바 가상 머신
바이트코드 파일을 특정 운영체제가 이해하는 기계어로 번역하고 실행시키는 명령어는 java이다.
java 명령어는 JDK와 함께 설치된 자바 가상 머신을 구동시켜 바이트 코드 파일을 완전한 기계어로 번역하고 실행시킨다.
바이트코드 파일과 다르게 자바 가상 머신은 운영체제에서 이해하는 기계어로 번역해야 하므로 운영체제별로 다르게 설치된다.
그래서 JDK도 운영체제별로 다른 것이다.

1.5 소스 작성부터 실행까지
이제 소스 작성부터 실행까지 실습해 보자
(1) 윈도우 탐색기에서 C:/temp 디렉토리를 다음 구조로 생성하고, Hello.java 소스 파일을 생성한다.
(2) Hello.java를 텍스트 에디터에서 열고, 다음과 같이 코드를 작성한다.
(3) 소스 파일을 javac 명령어로 컴파일해 보자. 명령 포롬프트에서 cd 명령어로 C:/temp 디렉토리로 이동하고, 다음과 같이 javac 명령어를 실행한다.
(4) javaa 명령어로 바이트코드 파일을 기계어로 번역하고 실행시켜 보자. 여전히 명령 프롬프트의 현재 위치는 C:/temp 디렉토리이다.
주의 할 점은 패키지 구분자는 .를 사용해야 하고, 클래스명은 .class를 제외한 Hello만 입력해야 한다는 점이다.
